#!/bin/bash

# GitHub CLIを使ってIssueを一括作成するスクリプト（ラベルなし版）
# 使用方法: ./scripts/create_issues_simple.sh

set -e

echo "🚀 施設予約システムのIssueを一括作成します..."

# Phase 1: 基盤機能
echo "📋 Phase 1: 基盤機能のIssueを作成中..."

gh issue create \
  --title "#1 基本レイアウトとナビゲーションの実装" \
  --body "## 概要
アプリケーション共通のレイアウト、ヘッダー、フッター、ナビゲーションメニューを作成

## 要件
- [ ] ロール別ナビゲーションメニュー（一般ユーザー・施設管理者・システム管理者）
- [ ] レスポンシブデザイン対応
- [ ] Bootstrap導入（または任意のCSSフレームワーク）
- [ ] ログイン/ログアウト機能表示

## 受け入れ条件
- [ ] ログイン後、ロールに応じた適切なメニューが表示される
- [ ] 各画面で共通レイアウトが適用される
- [ ] モバイル表示でも適切にメニューが表示される

## 技術要件
- Bootstrap 5.3系の導入
- Railsのpartialを活用したレイアウト設計
- ロール判定のヘルパーメソッド活用

## Phase
Phase 1: 基盤機能"

gh issue create \
  --title "#2 認証後のリダイレクト処理とダッシュボード" \
  --body "## 概要
ログイン成功時にロール別のダッシュボードにリダイレクト

## 要件
- [ ] 各ロール専用のダッシュボードページ作成
- [ ] ログイン後の適切なリダイレクト処理
- [ ] 各ダッシュボードに基本的な統計情報表示

## 受け入れ条件
- [ ] ログイン時に適切なダッシュボードに遷移し、基本情報が表示される
- [ ] 一般ユーザー: 予約可能施設数、自分の予約数を表示
- [ ] 施設管理者: 管理施設数、承認待ち予約数を表示
- [ ] システム管理者: 全体統計を表示

## 依存関係
- Issue #1 (基本レイアウト) の完了後に実装

## Phase
Phase 1: 基盤機能"

# Phase 2: 施設管理機能
echo "📋 Phase 2: 施設管理機能のIssueを作成中..."

gh issue create \
  --title "#3 施設一覧・詳細表示機能" \
  --body "## 概要
全ユーザーが施設を閲覧できる機能

## 要件
- [ ] 施設一覧ページ（アクティブな施設のみ表示）
- [ ] 施設詳細ページ（説明、料金、収容人数、場所など）
- [ ] 抽選対象施設の識別表示
- [ ] 検索・フィルタ機能（名前、料金帯、収容人数、抽選/通常予約）
- [ ] ページネーション対応

## 受け入れ条件
- [ ] 施設の情報が適切に表示され、検索・フィルタが機能する
- [ ] 抽選対象の施設が明確に区別できる
- [ ] ページネーションで大量データにも対応

## 技術要件
- Kaminariまたは pagy gemでページネーション実装
- Ransack gemで検索機能実装

## Phase
Phase 2: 施設管理機能"

gh issue create \
  --title "#4 システム管理者用施設管理機能" \
  --body "## 概要
システム管理者が施設を管理する機能

## 要件
- [ ] 施設の新規作成（フォーム）
- [ ] 施設情報の編集
- [ ] 施設の有効/無効切り替え
- [ ] 施設の削除（論理削除推奨）
- [ ] バリデーション・エラーハンドリング

## 受け入れ条件
- [ ] システム管理者のみが施設のCRUD操作を実行可能
- [ ] 適切なバリデーションエラーが表示される
- [ ] 削除時は論理削除で履歴を保持

## 権限設計
- system_adminロールのみアクセス可能
- 認可処理の実装（Pundit推奨）

## Phase
Phase 2: 施設管理機能"

gh issue create \
  --title "#5 施設管理者の割当機能" \
  --body "## 概要
システム管理者が施設管理者を割り当てる機能

## 要件
- [ ] 施設管理者一覧表示
- [ ] 施設管理者と施設の関連付け/解除
- [ ] 複数施設の一括割当機能
- [ ] 割当状況の可視化

## 受け入れ条件
- [ ] 施設管理者の割当・解除が正常に動作する
- [ ] 1つの施設に複数の管理者を割り当て可能
- [ ] 1人の管理者が複数施設を管理可能

## 技術要件
- FacilityManagerモデルを活用
- 中間テーブルを使った多対多の関連付け

## Phase
Phase 2: 施設管理機能"

# Phase 3: 通常予約機能
echo "📋 Phase 3: 通常予約機能のIssueを作成中..."

gh issue create \
  --title "#6 予約一覧表示機能" \
  --body "## 概要
ユーザーが自分の予約を確認、施設管理者が管理施設の予約を確認

## 要件
- [ ] 一般ユーザー：自分の予約一覧
- [ ] 施設管理者：管理施設の予約一覧
- [ ] システム管理者：全予約一覧
- [ ] ステータス別フィルタ（承認待ち・承認済み・拒否・キャンセル）
- [ ] 日付範囲フィルタ
- [ ] 通常予約と抽選予約の区別表示

## 受け入れ条件
- [ ] ロールに応じた適切な予約一覧が表示される
- [ ] フィルタ機能が正常に動作する
- [ ] 予約の詳細情報が適切に表示される

## 依存関係
- Issue #3 (施設表示機能) の完了後に実装

## Phase
Phase 3: 通常予約機能"

gh issue create \
  --title "#7 通常予約作成機能" \
  --body "## 概要
一般ユーザーが通常の施設予約を作成する機能

## 要件
- [ ] 施設選択（通常予約対象のみ）
- [ ] 日時選択（開始・終了時間）
- [ ] 利用目的入力
- [ ] 料金自動計算
- [ ] 重複チェック機能
- [ ] 確認画面表示

## 受け入れ条件
- [ ] 通常予約が正常に作成され、承認待ちステータスになる
- [ ] 重複した時間帯での予約は作成できない
- [ ] 料金が正確に計算される

## 技術要件
- JavaScript/Stimulusで動的な料金計算
- 重複チェックのバリデーション実装

## Phase
Phase 3: 通常予約機能"

gh issue create \
  --title "#8 通常予約管理機能（承認・拒否）" \
  --body "## 概要
施設管理者が通常予約を承認・拒否する機能

## 要件
- [ ] 承認待ち予約の一覧表示
- [ ] ワンクリック承認・拒否
- [ ] 拒否時のコメント機能
- [ ] 一括処理機能
- [ ] 承認・拒否時の通知（メールまたは画面通知）

## 受け入れ条件
- [ ] 予約の承認・拒否が正常に動作し、ステータスが更新される
- [ ] 拒否時にはコメントが必須となる
- [ ] 処理後に利用者へ通知が送信される

## 権限設計
- 施設管理者は自分が管理する施設の予約のみ操作可能

## Phase
Phase 3: 通常予約機能"

# Phase 4: 抽選機能
echo "📋 Phase 4: 抽選機能のIssueを作成中..."

gh issue create \
  --title "#9 抽選モデルとマイグレーションの作成" \
  --body "## 概要
抽選機能に必要なデータベーステーブルとモデルの作成

## 要件
- [ ] LotteryPeriodモデルとマイグレーション
- [ ] LotteryApplicationモデルとマイグレーション
- [ ] LotteryResultモデルとマイグレーション
- [ ] モデル間のアソシエーション設定
- [ ] バリデーション設定

## 受け入れ条件
- [ ] 抽選関連のモデルが正常に作成され、関連付けが機能する
- [ ] 適切なインデックスが設定されている
- [ ] バリデーションが正常に動作する

## データベース設計
### LotteryPeriod（抽選期間）
- facility_id: 施設ID
- start_date: 抽選対象期間開始日
- end_date: 抽選対象期間終了日
- application_start: 申込開始日時
- application_end: 申込終了日時
- lottery_date: 抽選実行日
- status: ステータス（accepting, closed, executed）
- max_applications_per_user: 1ユーザーあたりの申込上限

## Phase
Phase 4: 抽選機能"

gh issue create \
  --title "#10 抽選期間設定機能（施設管理者用）" \
  --body "## 概要
施設管理者が管理施設の抽選期間を設定する機能

## 要件
- [ ] 抽選期間の新規作成フォーム
- [ ] 抽選対象期間の設定（開始日〜終了日）
- [ ] 申込受付期間の設定
- [ ] 抽選実行予定日の設定
- [ ] ユーザーあたりの申込上限設定
- [ ] 抽選期間一覧・編集・削除機能

## 受け入れ条件
- [ ] 施設管理者が抽選期間を適切に設定・管理できる
- [ ] 日程の論理チェックが機能する（申込期間 < 抽選実行日 < 利用期間開始）
- [ ] 設定内容がわかりやすく表示される

## 依存関係
- Issue #9 (抽選モデル) の完了後に実装

## Phase
Phase 4: 抽選機能"

gh issue create \
  --title "#11 抽選申込機能（一般ユーザー用）" \
  --body "## 概要
一般ユーザーが抽選に申し込む機能

## 要件
- [ ] 抽選対象施設・期間の一覧表示
- [ ] 抽選申込フォーム（希望日時、利用目的、優先順位）
- [ ] 申込上限チェック機能
- [ ] 申込内容確認画面
- [ ] 申込履歴表示
- [ ] 申込キャンセル機能（締切前のみ）

## 受け入れ条件
- [ ] 利用者が抽選に申し込み、申込状況を確認できる
- [ ] 申込上限を超えた申込は拒否される
- [ ] 締切後はキャンセルできない

## UI/UX要件
- 申込可能な期間が分かりやすく表示される
- 希望日時の選択が直感的に操作できる

## Phase
Phase 4: 抽選機能"

gh issue create \
  --title "#12 抽選実行機能（施設管理者用）" \
  --body "## 概要
施設管理者が抽選を実行し、結果を管理する機能

## 要件
- [ ] 抽選実行ボタンとアルゴリズム
- [ ] 抽選結果の表示・確認画面
- [ ] 抽選結果の修正機能（手動調整）
- [ ] 当選者への自動通知機能
- [ ] 落選者への自動通知機能
- [ ] 抽選結果の確定処理

## 受け入れ条件
- [ ] 公平な抽選が実行され、結果が適切に通知される
- [ ] 手動調整により最適化が可能
- [ ] 結果確定後は変更不可

## 抽選アルゴリズム要件
- 完全にランダムな抽選を実装
- 重複申込の適切な処理
- ログによる透明性の確保

## Phase
Phase 4: 抽選機能"

gh issue create \
  --title "#13 抽選結果表示・確認機能" \
  --body "## 概要
抽選結果の表示と当選後の手続き

## 要件
- [ ] 利用者側：抽選結果確認画面
- [ ] 当選時の予約確定手続き
- [ ] 当選辞退機能
- [ ] 補欠繰り上げ機能
- [ ] 抽選履歴の管理

## 受け入れ条件
- [ ] 抽選結果が適切に表示され、後続手続きが機能する
- [ ] 辞退により補欠が自動的に繰り上がる
- [ ] 履歴がわかりやすく管理される

## 依存関係
- Issue #12 (抽選実行機能) の完了後に実装

## Phase
Phase 4: 抽選機能"

# Phase 5: 追加機能
echo "📋 Phase 5: 追加機能のIssueを作成中..."

gh issue create \
  --title "#14 カレンダー表示機能" \
  --body "## 概要
施設の予約状況をカレンダー形式で表示

## 要件
- [ ] 月・週・日表示の切り替え
- [ ] 予約の色分け表示（ステータス別・予約種別別）
- [ ] 抽選期間の表示
- [ ] 空き時間の確認
- [ ] カレンダーから直接予約・抽選申込

## 受け入れ条件
- [ ] カレンダーで予約状況が可視化され、直接操作できる
- [ ] レスポンシブ対応でモバイルでも使いやすい

## 技術要件
- FullCalendar.js の導入推奨
- Ajax による動的な予約操作

## Phase
Phase 5: 追加機能"

gh issue create \
  --title "#15 予約・抽選キャンセル機能" \
  --body "## 概要
予約と抽選申込のキャンセル処理

## 要件
- [ ] 通常予約のキャンセル（開始時間の24時間前まで）
- [ ] 抽選申込のキャンセル（申込締切前まで）
- [ ] 当選後の辞退処理
- [ ] 管理者によるキャンセル（理由必須）
- [ ] キャンセル履歴の保持

## 受け入れ条件
- [ ] 適切な権限でキャンセルが実行され、履歴が残る
- [ ] キャンセル料金の計算が正確
- [ ] 補欠繰り上げが自動実行される

## Phase
Phase 5: 追加機能"

gh issue create \
  --title "#16 通知機能の拡充" \
  --body "## 概要
予約・抽選に関する通知システム

## 要件
- [ ] 通常予約の承認・拒否通知
- [ ] 抽選申込受付通知
- [ ] 抽選結果通知（当選・落選）
- [ ] 予約開始前のリマインダー
- [ ] 抽選申込締切アラート
- [ ] 画面内通知とメール通知

## 受け入れ条件
- [ ] 適切なタイミングで各種通知が送信される
- [ ] 通知設定の管理が可能

## 技術要件
- Action Mailer での メール通知
- WebSocket または Turbo Streams での リアルタイム通知

## Phase
Phase 5: 追加機能"

gh issue create \
  --title "#17 レポート・統計機能" \
  --body "## 概要
利用状況の統計とレポート表示

## 要件
- [ ] 施設利用率レポート（通常予約・抽選別）
- [ ] 抽選倍率統計
- [ ] 収益レポート
- [ ] ユーザー利用統計
- [ ] CSVエクスポート機能
- [ ] グラフ表示（Chart.jsなど）

## 受け入れ条件
- [ ] 各種レポートが正確に表示され、エクスポート可能
- [ ] 期間指定での集計が可能
- [ ] 視覚的にわかりやすいグラフ表示

## 権限設計
- システム管理者：全体統計
- 施設管理者：管理施設の統計

## Phase
Phase 5: 追加機能"

gh issue create \
  --title "#18 ユーザー管理機能" \
  --body "## 概要
システム管理者用のユーザー管理画面

## 要件
- [ ] ユーザー一覧・検索
- [ ] ユーザーロールの変更
- [ ] ユーザーの有効/無効切り替え
- [ ] 新規ユーザー作成
- [ ] 抽選・予約履歴の確認

## 受け入れ条件
- [ ] ユーザーの管理操作が正常に動作する
- [ ] ロール変更時の適切な権限チェック
- [ ] 利用履歴の詳細確認が可能

## Phase
Phase 5: 追加機能"

# Phase 6: UX向上
echo "📋 Phase 6: UX向上のIssueを作成中..."

gh issue create \
  --title "#19 検索・フィルタ機能の拡充" \
  --body "## 概要
より詳細な検索・フィルタ機能

## 要件
- [ ] 施設・予約・抽選の複合条件検索
- [ ] 保存済み検索条件
- [ ] 並び替え機能
- [ ] お気に入り施設機能
- [ ] 抽選確率の表示

## 受け入れ条件
- [ ] 高度な検索機能が動作する
- [ ] ユーザーの利便性が大幅に向上
- [ ] 検索結果のパフォーマンスが良好

## 技術要件
- ElasticSearch または Ransack の高度活用
- Redis でのキャッシュ機能

## Phase
Phase 6: UX向上"

gh issue create \
  --title "#20 モバイル対応・PWA化" \
  --body "## 概要
モバイル体験の向上

## 要件
- [ ] レスポンシブデザインの改善
- [ ] PWA（Progressive Web App）対応
- [ ] オフライン対応
- [ ] プッシュ通知（抽選結果など）

## 受け入れ条件
- [ ] モバイルで快適に利用できる
- [ ] アプリライクな体験を提供
- [ ] オフライン時も基本機能が利用可能

## 技術要件
- Service Worker の実装
- Web App Manifest の設定
- Push API との連携

## Phase
Phase 6: UX向上"

echo "✅ 全20個のIssueの作成が完了しました！"
echo "🔗 GitHubでIssue一覧を確認してください。"
echo ""
echo "📌 推奨実装順序:"
echo "   Phase 1: Issues #1-2 (基盤)"
echo "   Phase 2: Issues #3-5 (施設管理)"
echo "   Phase 3: Issues #6-8 (通常予約)"
echo "   Phase 4: Issues #9-13 (抽選機能)"
echo "   Phase 5: Issues #14-18 (追加機能)"
echo "   Phase 6: Issues #19-20 (UX向上)"
